Icon="icons/plugins.png"
Menu="Tasks"
Title="Plugins"
---
<style>
table.tablesorter {
	font-family:arial;
	margin:10px 0pt 15px;
	text-align: left;
}
table.tablesorter thead tr th, table.tablesorter tfoot tr th {
	background-color: #e6EEEE;
	border: 1px solid #FFF;
	font-size: 8pt;
	padding: 4px;
}
table.tablesorter thead tr .header {
	background-image: url(/plugins/webGui/images/sort_both.png);
	background-repeat: no-repeat;
	background-position: center right;
	cursor: pointer;
}
table.tablesorter tbody td {
	color: #3D3D3D;
	padding: 4px;
	background-color: #FFF;
	vertical-align: top;
}
table.tablesorter tbody tr.odd td {
	background-color:#F0F0F6;
}
table.tablesorter thead tr .headerSortUp {
	background-image: url(/plugins/webGui/images/sort_asc.png);
}
table.tablesorter thead tr .headerSortDown {
	background-image: url(/plugins/webGui/images/sort_desc.png);
}
table.tablesorter thead tr .headerSortDown, table.tablesorter thead tr .headerSortUp {
	background-color: #8dbdd8;
}
</style>
<script type="text/javascript" src="/plugins/webGui/js/jquery.tablesorter.min.js"></script>
<script>
$(document).ready(function() {
  $("#plugin_table").tablesorter( {headers: { 0: { sorter: false}}} );
});
</script>
<script>
function openWindow(cmd, title) {
  var name     = "<?=$var[NAME];?> " + title;
  var width    = ((screen.width*2)/3)||0;
  var height   = ((screen.height*2)/3)||0;
  var features = "location=no,resizeable=yes,scrollbars=yes,width=" + width + ",height=" + height;

  var url      = "/logging.htm?title="+name+"&cmd="+cmd+"&forkCmd=Start";

  var myWindow = window.open(url, name.replace(/ /g, "_"), features);
  myWindow.focus();
}
function noticeUninstall() {
  alert( "You must reboot server for Uninstall to take effect, or redownload to undo the Uninstall.");
}
</script>
<?PHP
$my_plugins = array();

// Given a plugin file name, extract plugin name and version.
function get_plugin_info($file, $name, $version) {
  $parts = preg_split( "/[^a-zA-Z0-9]/", basename($file, ".plg"), 2);
  $name = $parts[0];
  $version = $parts[1];
}
// Create a list of all currently installed plugins.
function scan_plugins() {
  global $my_plugins;
  foreach (glob("/boot/config/plugins/*.plg", GLOB_NOSORT) as $file) {
    get_plugin_info($file, $name, $version);
    $my_plugins[$name]['version'] = $version;
    $my_plugins[$name]['file'] = basename($file);
    if (is_file("/var/log/plugins/$name"))
      $my_plugins[$name]['status'] = "Installed";
    else {
      exec("pgrep -f \"{$my_plugins[$name]['file']}\"", $pids);
      if (!empty($pids))
        $my_plugins[$name]['status'] = "Installing";
      else
        $my_plugins[$name]['status'] = "Downloaded";
    }
  }
}
function download_link($plugin_name, $file, $url) {
  $op = "Download";
  $oper = "$op $plugin_name";
  $cmd = "/usr/local/emhttp/plugins/webGui/scripts/plugin $oper $file $url";
  return "<a href='/update.htm?cmd=$cmd&runCmd=Start' target='progressFrame'>$op</a>";
}
function remove_link($plugin_name, $file) {
  $op = "Remove";
  $oper = "$op $plugin_name";
  $cmd = "/usr/local/emhttp/plugins/webGui/scripts/plugin $oper $file";
  return "<a href='/update.htm?cmd=$cmd&runCmd=Start' target='progressFrame'>$op</a>";
}
function install_link($plugin_name, $file) {
  $op = "Install";
  $oper = "$op $plugin_name";
  $cmd = "/usr/local/emhttp/plugins/webGui/scripts/plugin $oper $file";
  return "<a href='/update.htm?cmd=sleep 2&runCmd=Start' target='progressFrame' onclick='openWindow(\"$cmd\", \"$oper\")'>$op</a>";
}
function uninstall_link($plugin_name, $file) {
  $op = "Uninstall";
  $oper = "$op $plugin_name";
  $cmd = "/usr/local/emhttp/plugins/webGui/scripts/plugin $oper $file";
  return "<a href='/update.htm?cmd=$cmd&runCmd=Start' target='progressFrame' onclick='noticeUninstall()'>$op</a>";
}
function update_link($plugin_name, $file, $url) {
  $op = "Update";
  $oper = "$op $plugin_name";
  $cmd = "/usr/local/emhttp/plugins/webGui/scripts/plugin $oper $file $url";
  return "<a href='/update.htm?cmd=sleep 2' target='progressFrame' onclick='openWindow(\"$cmd\", \"$oper\")'>$op</a>";
}
function plugin_ops($url) {
  global $my_plugins;
  $result = "";
  get_plugin_info($url, $plugin_name, $plugin_version);
  if (array_key_exists($plugin_name, $my_plugins)) {
    if ($my_plugins[$plugin_name]['status'] == "Installed") {
      $result .= "<strong>Installed</strong><br />";
      if ($my_plugins[$plugin_name]['version'] != $plugin_version) {
        $result .= update_link($plugin_name, $my_plugins[$plugin_name]['file'], $url) . "<br />";
      }
      $result .= uninstall_link($plugin_name, $my_plugins[$plugin_name]['file']);
    }
    else if ($my_plugins[$plugin_name]['status'] == "Installing") {
      $result .= "<em><strong>Installing<strong></em>";
    }
    else {
      $result .= "<strong>Downloaded</strong><br />";
      $result .= install_link($plugin_name, $my_plugins[$plugin_name]['file']) . "<br />";
      $result .= remove_link($plugin_name, $my_plugins[$plugin_name]['file']);
    }
  }
  else {
    $result .= download_link($plugin_name, basename($url), $url);
  }
  return $result;
}

// returns text between first set of double-quotes encountered in $tag
function get_href($tag) {
  // sanity check: make sure we have an href
  if (($q1 = strpos($tag, "href")) === False)
    return False;
  $q1 = strpos($tag, '"', $q1) + 1;
  $q2 = strpos($tag, '"', $q1);
  return substr($tag,$q1,$q2-$q1);
}
// Extract and process the <table> from the plugins page on the wiki.
function echo_plugin_table() {
  $URL = "http://lime-technology.com/wiki/index.php/UnRAID_Plugins";
  $out = file_get_contents($URL);

  // extract our <table ...> from wiki page and add <thead></thead> and <tbody></tbody> tags
  // required by tablesorter (mediawiki doesn't put these in the generated html).
  // ugly code but gets the job done :)
  $result = "<table class='tablesorter' id='plugin_table'><thead>";
  $beg = strpos($out, ">", strpos($out, "<table")) + 1;
  $end = strpos($out, "</tr>", $beg) + strlen( "</tr>");
  $result .= substr($out, $beg, $end - $beg);
  $result .= "</thead><tbody>";
  $beg = $end + 1;
  $end = strpos($out, "</table>", $beg);
  $result .= substr($out, $beg, $end - $beg);

  // patch any wiki links inside the table
  $result = str_replace( '"/wiki/', '"http://lime-technology.com/wiki/', $result);

  // modify the 5th cell of each data row with our plugin ops
  $out = $result;
  // skip header row
  $beg = strpos($out, "</tr>");
  $result = substr($out, 0, $beg);
  $out = substr($out, $beg);

  // process each data row
  while (($beg = strpos($out, "<tr")) !== false) {
    // find the 5th <td>
    $beg = strpos($out, "<td", $beg+1);
    $beg = strpos($out, "<td", $beg+1);
    $beg = strpos($out, "<td", $beg+1);
    $beg = strpos($out, "<td", $beg+1);
    // here it is
    $beg = strpos($out, "<td", $beg+1);
    $end = strpos($out, "</td>", $beg);
    $result .= substr($out, 0, $beg);
    // there should be an <a> tag in here, get it's href
    $url = get_href(substr($out,$beg,$end-$beg));
    if (pathinfo($url, PATHINFO_EXTENSION) != "plg")
      $result .= "<td><em>No plg file</em>";
    else
      $result .= "<td>".plugin_ops($url);
    $out = substr($out, $end);
  }
  $result .= $out;

  // now add rows for plugins in /boot/config/plugins which are not in wiki table
  // more: still todo

  // finally, end the table
  $result .= "</tbody></table>";
  echo $result;
}
?>
**All plugins are the responsibility of the plugin author; USE AT YOUR OWN RISK. Lime Technology
neither recommends nor endorses any plugin for any particular purpose, and shall assume no
responsibility for their use.**

> This page content is dynamically generated
> from the [unRaid Plugins](http://lime-technology.com/wiki/index.php/UnRAID_Plugins) wiki page. New
> plugins added to the wiki will show up here as well.

> Installing a plugin is a two-step process:

> 1. First click the plugin Download link.  This is a fast operation that downloads only the plugin
> definition file.  If successful, status will change to "Downloaded" and you can...
> 2. Click the Install link.  This will open a *progress window* that displays information
> about the progress of the plugin installation.  Some plugins install instantly; some may take
> minutes depending on the complexity of the plugin.

> Plugin designers: [see below](#designers)

<? scan_plugins(); ?>
<? echo_plugin_table(); ?>


> ### For Plugin Designers {#designers}
> 
> To make a plugin available, edit the
> [unRaid Plugins](http://lime-technology.com/wiki/index.php/UnRAID_Plugins) wiki page.  You must
> provide a `.plg` file download link.  There is a naming convention for plugins as follows:
> ~~~
> name-version-architecture-build.plg
> ~~~
> For example:
> ~~~
> slimserver-7.7.0-noarch-limetech.plg
> ~~~
> The part of the file name before the first dash is taken as the *plugin name* and everything after
> the first dash is taken as the *plugin version*.  Note: since most current plugins don't follow
> this convention, the plugin manager will look for the **first non-alpahnumeric character** instead
> of a dash to delineate the plugin name from version.  Note also that underscore is **not** considered
> alpahnumeric in this context.  We might decide to strictly enforce the dash convention in the future.
> 
> The last step of your plugin should be the creation of the file `/var/log/plugins/<plugin-name>`
> (note this is just the name of the plugin and there is no extension).  The existence of this
> file tells the plugin manager the plugin has been installed.  The plugin manager does not use
> the *contents* of this file, but the plugin might store something in there.
> 
> The *plugin version* of the current download link is compared against the *plugin version* of
> the installed plugin.  If they are different, then an Update link is provided.  The action of
> this link is as follows:
> 
> 1. Remove the existing `/boot/config/plugins/<plugin-file>.plg` file.
> 2. Remove the `/var/log/plugins/<plugin-name>` file.
> 3. wget the new plugin `.plg` file.
> 4. Execute the `installplg <plugin-file>.plg` script.
> 
> ### Other Notes
> 
> This early plugin manager release still needs a little more work:
> 
> * The Version column in the table does not show any version information, just status. I haven't
> settled on a way to solve this yet.

> * Uninstall needs more work: to restore system to state without plugin is almost always going
> to require a reboot.  In addition there may be a `/boot/config/plugins/<plugin-name>` directory
> that we want to remove as well; but this cleanup probably should be done during the reboot.  Code
> still needs to be added to accomplish this.
> 
> * What we really need is something in the plg file that tells us how to handle operations:
> ** Install - what pre-condition, if any, should exist, e.g., "array must be stopped", or
> "must be installed upon reboot only" flags, etc.
> ** Uninstall - maybe a script that does the uninstall, or "uninstall upon reboot" flag, etc.
> ** Update - similar to Install: "must uninstall first" flag.
